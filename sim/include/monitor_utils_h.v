// File generated by monitor_utils.py script 2020-11-30 20:27:16.240362

function `STRING state;
input [`STATE_WIDTH-1:0] arg;
begin
    case (arg)
        `STATE_RESET:
            state = "RESET";
        `STATE_IDLE:
            state = "IDLE";
        `STATE_FETCH:
            state = "FETCH";
        `STATE_DECODE:
            state = "DECODE";
        `STATE_EXEC:
            state = "EXEC";
        `STATE_MEM:
            state = "MEM";
        default:
            state = "UNKNOWN";
    endcase
end
endfunction

function `STRING inst_type;
input [`INST_TYPE_WIDTH-1:0] arg;
begin
    case (arg)
        `INST_TYPE_IMM:
            inst_type = "IMM";
        `INST_TYPE_INT_IMM:
            inst_type = "INT_IMM";
        `INST_TYPE_INT_REG:
            inst_type = "INT_REG";
        `INST_TYPE_BRANCH:
            inst_type = "BRANCH";
        `INST_TYPE_STORE:
            inst_type = "STORE";
        `INST_TYPE_JAL:
            inst_type = "JAL";
        `INST_TYPE_AUIPC:
            inst_type = "AUIPC";
        `INST_TYPE_JALR:
            inst_type = "JALR";
        `INST_TYPE_LOAD:
            inst_type = "LOAD";
        `INST_TYPE_FENCE:
            inst_type = "FENCE";
        default:
            inst_type = "UNKNOWN";
    endcase
end
endfunction

function `STRING funct;
input [`FUNCT_WIDTH-1:0] arg;
begin
    case (arg)
        `FUNCT_ADD:
            funct = "ADD";
        `FUNCT_SUB:
            funct = "SUB";
        `FUNCT_AND:
            funct = "AND";
        `FUNCT_EQ:
            funct = "EQ";
        `FUNCT_NEQ:
            funct = "NEQ";
        `FUNCT_LT:
            funct = "LT";
        `FUNCT_GTE:
            funct = "GTE";
        `FUNCT_LTU:
            funct = "LTU";
        `FUNCT_GTEU:
            funct = "GTEU";
        `FUNCT_MEM_BYTE:
            funct = "MEM_BYTE";
        `FUNCT_MEM_HWORD:
            funct = "MEM_HWORD";
        `FUNCT_MEM_WORD:
            funct = "MEM_WORD";
        `FUNCT_MEM_BYTEU:
            funct = "MEM_BYTEU";
        `FUNCT_MEM_HWORDU:
            funct = "MEM_HWORDU";
        `FUNCT_JAL:
            funct = "JAL";
        `FUNCT_SLL:
            funct = "SLL";
        `FUNCT_SLT:
            funct = "SLT";
        `FUNCT_SLTU:
            funct = "SLTU";
        `FUNCT_XOR:
            funct = "XOR";
        `FUNCT_SRL:
            funct = "SRL";
        `FUNCT_SRA:
            funct = "SRA";
        `FUNCT_OR:
            funct = "OR";
        default:
            funct = "UNKNOWN";
    endcase
end
endfunction

function `STRING pc_next_sel;
input [`PC_NEXT_SEL_WIDTH-1:0] arg;
begin
    case (arg)
        `PC_NEXT_SEL_STALL:
            pc_next_sel = "STALL";
        `PC_NEXT_SEL_INCR:
            pc_next_sel = "INCR";
        `PC_NEXT_SEL_ADD_IMM:
            pc_next_sel = "ADD_IMM";
        `PC_NEXT_SEL_ADD_RS1_IMM:
            pc_next_sel = "ADD_RS1_IMM";
        default:
            pc_next_sel = "UNKNOWN";
    endcase
end
endfunction

function `STRING alu_op;
input [`ALU_OP_WIDTH-1:0] arg;
begin
    case (arg)
        `ALU_OP_NOP:
            alu_op = "NOP";
        `ALU_OP_ADD:
            alu_op = "ADD";
        `ALU_OP_SUB:
            alu_op = "SUB";
        `ALU_OP_AND:
            alu_op = "AND";
        `ALU_OP_SLL:
            alu_op = "SLL";
        `ALU_OP_SRA:
            alu_op = "SRA";
        `ALU_OP_SRL:
            alu_op = "SRL";
        `ALU_OP_XOR:
            alu_op = "XOR";
        `ALU_OP_OR:
            alu_op = "OR";
        `ALU_OP_SLT:
            alu_op = "SLT";
        `ALU_OP_SLTU:
            alu_op = "SLTU";
        default:
            alu_op = "UNKNOWN";
    endcase
end
endfunction

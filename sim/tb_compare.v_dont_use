module tb_compare();
reg[`DATA_WIDTH-1:0] a;
reg[`DATA_WIDTH-1:0] b;
reg sign;
wire eq;
wire gt;
wire lt;
integer i;
integer j;
initial begin
    sign = 0;
    for(i = 0; i < 16; i = i + 1) begin
        for(j = 0; j < 16; j = j + 1) begin
            do_test;
        end
    end
    sign = 1;
    for(i = -8; i < 8; i = i + 1) begin
        for(j = -8; j < 8; j = j + 1) begin
            do_test;
        end
    end
    $display("Test PASSED");
end

comparator dut(
    .a(a),
    .b(b),
    .sign(sign),
    .eq(eq),
    .gt(gt),
    .lt(lt)
);

task do_test;
    begin
        a = i;
        b = j;
        #1;
        //$display("i %0d", i);
        //$display("j %0d", j);
        //$display("eq %0d", eq);
        //$display("lt %0d", lt);
        //$display("gt %0d\n", gt);
        if(i == j)
            assert(eq === 1 && lt === 0 && gt === 0, "eq test");
        if(i > j)
            assert(eq === 0 && lt === 1 && gt === 0, "lt test");
        if(i < j)
            assert(eq === 0 && lt === 0 && gt === 1, "gt test");
    end
endtask

task assert;
input expr;
input [1023:0] test;
    begin
        if(!expr) begin
            $display("assertion failed: %0s", test);
            $display("                : a  %0d", i);
            $display("                : b  %0d", j);
            $display("                : eq %0d", eq);
            $display("                : lt %0d", lt);
            $display("                : gt %0d", gt);
            $finish;
        end
    end
endtask

endmodule

#!/usr/bin/env python
from pathlib import Path
import re
import argparse
import sys
from datetime import datetime

parser = argparse.ArgumentParser(description='Parse header for magic number macros and generate pretty printers')
parser.add_argument('header', type=Path, help='RTL header file')
parser.add_argument('-monitor', type=Path, dest='monitor', help='Pretty print header file for monitor_cpu')
args = parser.parse_args()

def generated(path):
    print(f"Generated {path.resolve()}")

printer_template = """
function `STRING {name};
input [`{width}-1:0] arg;
begin
    case (arg)
{entries_str}
        default:
            {name} = "UNKNOWN";
    endcase
end
endfunction
""".strip('\n')

entry_template = """
        `{entry}:
            {name} = "{entry_name}";
""".strip('\n')

parse_this = [
    dict(name = 'state'),
    dict(name = 'inst_type'),
    dict(name = 'funct'),
    dict(name = 'pc_next_sel'),
]
for parse in parse_this:
    parse['regex'] = re.compile(f'({parse["name"].upper()}_(\w+))\s+(\d+)')
    parse['entries'] = []
    parse['gtkwave'] = []

with args.header.open('r') as f:
    for line in f:
        for parse in parse_this:
            m = parse['regex'].search(line)
            if m:
                entry = m[1]
                entry_name = m[2]
                value = m[3]
                if entry_name == 'WIDTH':
                    parse['width'] = entry
                else:
                    f = dict(entry = entry, name = parse['name'], entry_name = entry_name)
                    parse['entries'].append(entry_template.format(**f))
                    parse['gtkwave'].append(f'{value} {entry_name}')
                break

printer_header = [f'// Auto generated by {sys.argv[0]} {datetime.now()}']
for parse in parse_this:
    parse['entries_str'] = '\n'.join(parse['entries'])
    printer_header.append(printer_template.format(**parse))

generated(args.monitor)
args.monitor.write_text('\n\n'.join(printer_header) + '\n')

for parse in parse_this:
    path = (Path.cwd()/parse['name']).with_suffix('.gtkfilter')
    generated(path)
    path.write_text('\n'.join(parse['gtkwave']) + '\n')

